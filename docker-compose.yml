version: '3.8'

services:
  app:
    build:
      args:
        - APP_ENV
      context: .
    command: npm run start:dev
    depends_on:
      - pgsqldb
    env_file:
      - .env
    environment:
      APP_ENV: ${APP_ENV}
      APP_PORT: ${APP_PORT}
      DB_HOST: pgsqldb
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
      JWT_ACCESS_TOKEN_EXP_IN_SEC: ${JWT_ACCESS_TOKEN_EXP_IN_SEC}
      JWT_REFRESH_TOKEN_EXP_IN_SEC: ${JWT_REFRESH_TOKEN_EXP_IN_SEC}
      JWT_PUBLIC_KEY_BASE64: ${JWT_PUBLIC_KEY_BASE64}
      JWT_PRIVATE_KEY_BASE64: ${JWT_PRIVATE_KEY_BASE64}
      DEFAULT_ADMIN_USER_PASSWORD: ${DEFAULT_ADMIN_USER_PASSWORD}
    expose:
      - ${APP_PORT}
    ports:
      - ${APP_PORT}:3000
    volumes:
      - ./:/usr/src/app
      - node_modules:/usr/src/app/node_modules/

  pgsqldb:
    image: postgres:15
    env_file:
      - .env
    environment:
      POSTGRES_USER: '${DB_USER}'
      POSTGRES_PASSWORD: '${DB_PASS}'
      POSTGRES_DB: '${DB_NAME}'
    expose:
      - ${DB_PORT}
    ports:
      - ${DB_PORT}:5432
    restart: unless-stopped
    volumes:
      - pgsqldata:/var/lib/postgresql/data

  pgsqldb-e2e:
    image: postgres:15
    environment:
      POSTGRES_USER: '${TEST_DB_USER}'
      POSTGRES_PASSWORD: '${TEST_DB_PASS}'
      POSTGRES_DB: '${TEST_DB_NAME}'
    expose:
      - ${TEST_DB_PORT}
    ports:
      - ${TEST_DB_PORT}:5432
    restart: unless-stopped
    # Leaving this commented ensures a fresh database every time the container spins up
    # Uncomment (along with volumes.pgsqldata-e2e) only to debug DB state after E2E runs
    # volumes:
    #   - pgsqldata-e2e:/var/lib/postgresql/data

  adminer:
    image: adminer
    ports:
      - ${ADMINER_PORT}:8080
    depends_on:
      - pgsqldb

volumes:
  node_modules:
  pgsqldata:
  # pgsqldata-e2e:
