name: tests

on:
  pull_request:
    branches: [master, main]
  workflow_call:
    secrets:
      NPM_TOKEN:
        required: false

env:
  ENVIRONMENT: "test"

jobs:
  test_pull_request:
    runs-on: ubuntu-20.04
    environment: test
    env:
      ADMINER_PORT: 8000
      APP_ENV: test
      APP_PORT: 3000
      # Setting DB_* env variables just to avoid the CLI warning in GitHub Actions
      # These are technically not necessary since we use TEST_DB_* for tests
      DB_HOST: localhost
      DB_PORT: 5433
      DB_NAME: my-nest-rest-starter-db-e2e
      DB_USER: e2eusr
      DB_PASS: e2epwd
      TEST_DB_HOST: localhost
      TEST_DB_PORT: 5433
      TEST_DB_NAME: my-nest-rest-starter-db-e2e
      TEST_DB_USER: e2eusr
      TEST_DB_PASS: e2epwd
      JWT_ACCESS_TOKEN_EXP_IN_SEC: 3600
      JWT_REFRESH_TOKEN_EXP_IN_SEC: 7200
      JWT_PUBLIC_KEY_BASE64: ${{ secrets.JWT_PUBLIC_KEY_BASE64 }}
      JWT_PRIVATE_KEY_BASE64: ${{ secrets.JWT_PRIVATE_KEY_BASE64 }}
      DEFAULT_ADMIN_USER_PASSWORD: example_admin_pass
      SILENT_LOGS: false

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      # Skip post-install scripts here, as a malicious scripts can steal NODE_AUTH_TOKEN
      - name: Install Dependencies
        run: npm ci --ignore-scripts
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # `npm rebuild` will run all those post-install scripts for us
      - run: npm rebuild && npm run prepare --if-present

      - name: Jest Unit and Integration Runner
        run: npm test

      - name: Build the Docker-Compose Stack
        run: docker-compose -f docker-compose.yml up -d pgsqldb-e2e

      - name: Check Running Containers
        run: docker ps -a

      - name: Jest Supertest E2E Test Runner
        run: sleep 5 && npm run test:e2e
